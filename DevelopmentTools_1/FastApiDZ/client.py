import streamlit as st
import httpx
import asyncio
import json


BASE_URL = "http://127.0.0.1:8000/api/v1/models"

def generate_large_training_data(rows: int, features: int):
    """–°–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è."""
    return [
        {
            "X": [[j + i for j in range(features)] for i in range(rows)],
            "y": [sum(range(features)) + i for i in range(rows)],
            "config": {
                "hyperparameters": {"fit_intercept": True},
                "id": f"model_{rows}_{features}"
            },
        },
        {
            "X": [[j * i for j in range(features)] for i in range(rows)],
            "y": [sum(range(features)) * i for i in range(rows)],
            "config": {
                "hyperparameters": {"fit_intercept": True},
                "id": f"model_{rows}_{features}"
            },
        },
    ]

async def train_model(data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
    async with httpx.AsyncClient() as client:
        response = await client.post(f"{BASE_URL}/fit", json=data)
        response.raise_for_status()
        return response.json()


async def load_model(data):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏."""
    async with httpx.AsyncClient() as client:
        response = await client.post(f"{BASE_URL}/load", json=data)
        response.raise_for_status()
        return response.json()


async def predict_model(data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ."""
    async with httpx.AsyncClient() as client:
        response = await client.post(f"{BASE_URL}/predict", json=data)
        response.raise_for_status()
        return response.json()


async def list_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π."""
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{BASE_URL}/list_models")
        response.raise_for_status()
        return response.json()


async def remove_all_models():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π."""
    async with httpx.AsyncClient() as client:
        response = await client.delete(f"{BASE_URL}/remove_all")
        response.raise_for_status()
        return response.json()


def render_header(title: str, subtitle: str):
    st.title(f"üíÖüèª {title}")
    st.caption(subtitle)


def render_menu():
    st.sidebar.title("üé® –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    return st.sidebar.radio(
        "üëë –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        ["–û–±—É—á–µ–Ω–∏–µ", "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π", "–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"],
    )


def app():
    render_header("Model Management Interface", "–°—Ç–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ML-–º–æ–¥–µ–ª—è–º–∏")
    menu = render_menu()

    if menu == "–û–±—É—á–µ–Ω–∏–µ":
        st.header("üî• –û–±—É—á–µ–Ω–∏–µ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π")
        training_data = st.text_area(
            "üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π:",
            value=json.dumps(
                generate_large_training_data(1000, 100000),
                indent=2,
            ),
        )


        if st.button("üíÉ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π"):
            with st.spinner("‚ú® –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π..."):
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    results = loop.run_until_complete(train_model(json.loads(training_data)))
                    st.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    st.json(results)
                except Exception as e:
                    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    elif menu == "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏":
        st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π")
        load_data = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:",
            value=json.dumps(
                [{"id": "model_1"}, {"id": "model_2"}],
                indent=2,
            ),
        )

        if st.button("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏"):
            with st.spinner("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π..."):
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    results = loop.run_until_complete(load_model(json.loads(load_data)))
                    st.success("‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                    st.json(results)
                except Exception as e:
                    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    elif menu == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
        st.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
        prediction_data = st.text_area(
            "üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
            value=json.dumps(
                [
                    {"id": "model_1", "X": [[10, 11, 12, 13], [20, 21, 22, 23]]},
                    {"id": "model_2", "X": [[30, 32, 34, 36], [40, 42, 44, 46]]},
                ],
                indent=2,
            ),
        )

        if st.button("‚ú® –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
            with st.spinner("üîÆ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π..."):
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    results = loop.run_until_complete(predict_model(json.loads(prediction_data)))
                    st.success("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!")
                    st.json(results)
                except Exception as e:
                    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    elif menu == "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π":
        st.header("üìÇ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
        if st.button("üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"):
            with st.spinner("üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π..."):
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    models = loop.run_until_complete(list_models())
                    st.success("‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω!")
                    st.json(models)
                except Exception as e:
                    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    elif menu == "–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π":
        st.header("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
        if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏"):
            with st.spinner("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π..."):
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    results = loop.run_until_complete(remove_all_models())
                    st.success("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")
                    st.json(results)
                except Exception as e:
                    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    app()
